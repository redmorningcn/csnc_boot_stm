###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.1.10123/W32 for ARM       10/May/2018  08:55:42
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\uCOS-III\Source\os_stat.c
#    Command line =  
#        "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\uCOS-III\Source\os_stat.c"
#        -D USE_STDPERIPH_DRIVER -lCN "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\List"
#        -o "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\uCOS-III\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\uCOS-III\IAR\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\OS\uCOS-III\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\ST\STM32\inc\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\BSP\IAR\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-LIB\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-CPU\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Ports\ARM-Cortex-M3\Generic\IAR\"
#        -I "F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\..\..\..\..\..\uCOS-III\Source\"
#        -On --use_c++_inline
#    List file    =  
#        F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\List\os_stat.lst
#    Object file  =  
#        F:\iar\001
#        backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\uCOS-III\IAR\Flash\Obj\os_stat.o
#
###############################################################################

F:\iar\001 backup\Micrium_uC-Eval-STM32F107_uCOS-III\Micrium\Software\uCOS-III\Source\os_stat.c
      1          /*
      2          ************************************************************************************************************************
      3          *                                                      uC/OS-III
      4          *                                                 The Real-Time Kernel
      5          *
      6          *                                  (c) Copyright 2009-2012; Micrium, Inc.; Weston, FL
      7          *                           All rights reserved.  Protected by international copyright laws.
      8          *
      9          *                                                  STATISTICS MODULE
     10          *
     11          * File    : OS_STAT.C
     12          * By      : JJL
     13          * Version : V3.03.01
     14          *
     15          * LICENSING TERMS:
     16          * ---------------
     17          *           uC/OS-III is provided in source form for FREE short-term evaluation, for educational use or 
     18          *           for peaceful research.  If you plan or intend to use uC/OS-III in a commercial application/
     19          *           product then, you need to contact Micrium to properly license uC/OS-III for its use in your 
     20          *           application/product.   We provide ALL the source code for your convenience and to help you 
     21          *           experience uC/OS-III.  The fact that the source is provided does NOT mean that you can use 
     22          *           it commercially without paying a licensing fee.
     23          *
     24          *           Knowledge of the source code may NOT be used to develop a similar product.
     25          *
     26          *           Please help us continue to provide the embedded community with the finest software available.
     27          *           Your honesty is greatly appreciated.
     28          *
     29          *           You can contact us at www.micrium.com, or by phone at +1 (954) 217-2036.
     30          ************************************************************************************************************************
     31          */
     32          
     33          #define  MICRIUM_SOURCE
     34          #include <os.h>
     35          
     36          #ifdef VSC_INCLUDE_SOURCE_FILE_NAMES
     37          const  CPU_CHAR  *os_stat__c = "$Id: $";
     38          #endif
     39          
     40          
     41          #if OS_CFG_STAT_TASK_EN > 0u
     42          
     43          /*
     44          ************************************************************************************************************************
     45          *                                                   RESET STATISTICS
     46          *
     47          * Description: This function is called by your application to reset the statistics.
     48          *
     49          * Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.
     50          *
     51          *                             OS_ERR_NONE
     52          *
     53          * Returns    : none
     54          ************************************************************************************************************************
     55          */
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void  OSStatReset (OS_ERR  *p_err)
     58          {
   \                     OSStatReset: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
     59          #if (OS_CFG_DBG_EN > 0u)
     60              OS_TCB      *p_tcb;
     61          #if (OS_MSG_EN > 0u)
     62              OS_MSG_Q    *p_msg_q;
     63          #endif
     64          #if (OS_CFG_Q_EN > 0u)
     65              OS_Q        *p_q;
     66          #endif
     67          #endif
     68              CPU_SR_ALLOC();
   \   00000006   0xF05F 0x0800      MOVS     R8,#+0
     69          
     70          
     71          
     72          #ifdef OS_SAFETY_CRITICAL
     73              if (p_err == (OS_ERR *)0) {
     74                  OS_SAFETY_CRITICAL_EXCEPTION();
     75                  return;
     76              }
     77          #endif
     78          
     79              CPU_CRITICAL_ENTER();
   \   0000000A   0x.... 0x....      BL       CPU_SR_Save
   \   0000000E   0x4680             MOV      R8,R0
   \   00000010   0x.... 0x....      BL       CPU_IntDisMeasStart
     80          #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
     81              OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable3
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     82              OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   00000022   0x8008             STRH     R0,[R1, #+0]
     83          #endif
     84          
     85          #if OS_CFG_STAT_TASK_EN > 0u
     86              OSStatTaskCPUUsageMax = 0u;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   0000002A   0x8008             STRH     R0,[R1, #+0]
     87              OSStatTaskTimeMax     = (CPU_TS)0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   00000032   0x6008             STR      R0,[R1, #+0]
     88          #endif
     89          
     90              OSTickTaskTimeMax     = (CPU_TS)0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     91          
     92          #if OS_CFG_TMR_EN > 0u
     93              OSTmrTaskTimeMax      = (CPU_TS)0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable3_5
   \   00000042   0x6008             STR      R0,[R1, #+0]
     94          #endif
     95          
     96          #ifdef CPU_CFG_INT_DIS_MEAS_EN
     97              OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     98          #endif
     99          
    100          #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    101              OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable3_7
   \   00000052   0x6008             STR      R0,[R1, #+0]
    102          #endif
    103          
    104          #if OS_MSG_EN > 0u
    105              OSMsgPool.NbrUsedMax  = 0u;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable3_8
   \   0000005A   0x8108             STRH     R0,[R1, #+8]
    106          #endif
    107              CPU_CRITICAL_EXIT();
   \   0000005C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0x.... 0x....      BL       CPU_SR_Restore
    108          
    109          #if OS_CFG_DBG_EN > 0u
    110              CPU_CRITICAL_ENTER();
   \   00000066   0x.... 0x....      BL       CPU_SR_Save
   \   0000006A   0x4680             MOV      R8,R0
   \   0000006C   0x.... 0x....      BL       CPU_IntDisMeasStart
    111              p_tcb = OSTaskDbgListPtr;
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable3_9
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0005             MOVS     R5,R0
    112              CPU_CRITICAL_EXIT();
   \   00000078   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000007C   0x4640             MOV      R0,R8
   \   0000007E   0x.... 0x....      BL       CPU_SR_Restore
    113              while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
   \                     ??OSStatReset_0: (+1)
   \   00000082   0x2D00             CMP      R5,#+0
   \   00000084   0xD02F             BEQ.N    ??OSStatReset_1
    114                  CPU_CRITICAL_ENTER();
   \   00000086   0x.... 0x....      BL       CPU_SR_Save
   \   0000008A   0x4680             MOV      R8,R0
   \   0000008C   0x.... 0x....      BL       CPU_IntDisMeasStart
    115          
    116          #ifdef CPU_CFG_INT_DIS_MEAS_EN
    117                  p_tcb->IntDisTimeMax    = (CPU_TS      )0;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0xF8C5 0x00B4      STR      R0,[R5, #+180]
    118          #endif
    119          
    120          #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    121                  p_tcb->SchedLockTimeMax = (CPU_TS      )0;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0xF8C5 0x00B8      STR      R0,[R5, #+184]
    122          #endif
    123          
    124          #if OS_CFG_TASK_PROFILE_EN > 0u
    125          #if OS_CFG_TASK_Q_EN > 0u
    126                  p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x67A8             STR      R0,[R5, #+120]
    127          #endif
    128                  p_tcb->SemPendTimeMax   = (CPU_TS      )0;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xF8C5 0x00A8      STR      R0,[R5, #+168]
    129                  p_tcb->CtxSwCtr         = (OS_CTR      )0;
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xF8C5 0x0090      STR      R0,[R5, #+144]
    130                  p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xF8A5 0x008C      STRH     R0,[R5, #+140]
    131                  p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0xF8A5 0x008E      STRH     R0,[R5, #+142]
    132                  p_tcb->CyclesTotal      = (OS_CYCLES   )0;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0xF8C5 0x009C      STR      R0,[R5, #+156]
    133                  p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xF8C5 0x00A0      STR      R0,[R5, #+160]
    134                  p_tcb->CyclesStart      =  OS_TS_GET();
   \   000000C4   0x.... 0x....      BL       CPU_TS_TmrRd
   \   000000C8   0xF8C5 0x0098      STR      R0,[R5, #+152]
    135          #endif
    136          
    137          #if OS_CFG_TASK_Q_EN > 0u
    138                  p_msg_q                 = &p_tcb->MsgQ;
   \   000000CC   0xF115 0x0064      ADDS     R0,R5,#+100
   \   000000D0   0x0006             MOVS     R6,R0
    139                  p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x81B0             STRH     R0,[R6, #+12]
    140          #endif
    141                  p_tcb                   = p_tcb->DbgNextPtr;
   \   000000D6   0xF8D5 0x50C0      LDR      R5,[R5, #+192]
    142                  CPU_CRITICAL_EXIT();
   \   000000DA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000DE   0x4640             MOV      R0,R8
   \   000000E0   0x.... 0x....      BL       CPU_SR_Restore
   \   000000E4   0xE7CD             B.N      ??OSStatReset_0
    143              }
    144          #endif
    145          
    146          #if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    147              CPU_CRITICAL_ENTER();
   \                     ??OSStatReset_1: (+1)
   \   000000E6   0x.... 0x....      BL       CPU_SR_Save
   \   000000EA   0x4680             MOV      R8,R0
   \   000000EC   0x.... 0x....      BL       CPU_IntDisMeasStart
    148              p_q = OSQDbgListPtr;
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable3_10
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x0007             MOVS     R7,R0
    149              CPU_CRITICAL_EXIT();
   \   000000F8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000FC   0x4640             MOV      R0,R8
   \   000000FE   0x.... 0x....      BL       CPU_SR_Restore
    150              while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
   \                     ??OSStatReset_2: (+1)
   \   00000102   0x2F00             CMP      R7,#+0
   \   00000104   0xD010             BEQ.N    ??OSStatReset_3
    151                  CPU_CRITICAL_ENTER();
   \   00000106   0x.... 0x....      BL       CPU_SR_Save
   \   0000010A   0x4680             MOV      R8,R0
   \   0000010C   0x.... 0x....      BL       CPU_IntDisMeasStart
    152                  p_msg_q                = &p_q->MsgQ;
   \   00000110   0xF117 0x0020      ADDS     R0,R7,#+32
   \   00000114   0x0006             MOVS     R6,R0
    153                  p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x81B0             STRH     R0,[R6, #+12]
    154                  p_q                    = p_q->DbgNextPtr;
   \   0000011A   0x69BF             LDR      R7,[R7, #+24]
    155                  CPU_CRITICAL_EXIT();
   \   0000011C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000120   0x4640             MOV      R0,R8
   \   00000122   0x.... 0x....      BL       CPU_SR_Restore
   \   00000126   0xE7EC             B.N      ??OSStatReset_2
    156              }
    157          #endif
    158          
    159              OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
   \                     ??OSStatReset_3: (+1)
   \   00000128   0x.... 0x....      BL       OS_TickListResetPeak
    160          
    161          #if OS_CFG_TMR_EN > 0u
    162              OS_TmrResetPeak();
   \   0000012C   0x.... 0x....      BL       OS_TmrResetPeak
    163          #endif
    164          
    165          
    166             *p_err = OS_ERR_NONE;
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x8020             STRH     R0,[R4, #+0]
    167          }
   \   00000134   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    168          
    169          /*$PAGE*/
    170          /*
    171          ************************************************************************************************************************
    172          *                                                DETERMINE THE CPU CAPACITY
    173          *
    174          * Description: This function is called by your application to establish CPU usage by first determining how high a 32-bit
    175          *              counter would count to in 1/10 second if no other tasks were to execute during that time.  CPU usage is
    176          *              then determined by a low priority task which keeps track of this 32-bit counter every second but this
    177          *              time, with other tasks running.  CPU usage is determined by:
    178          *
    179          *                                             OS_Stat_IdleCtr
    180          *                 CPU Usage (%) = 100 * (1 - ------------------)
    181          *                                            OS_Stat_IdleCtrMax
    182          *
    183          * Argument(s): p_err      is a pointer to a variable that will contain an error code returned by this function.
    184          *
    185          *                             OS_ERR_NONE
    186          *
    187          * Returns    : none
    188          ************************************************************************************************************************
    189          */
    190          

   \                                 In section .text, align 2, keep-with-next
    191          void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
    192          {
   \                     OSStatTaskCPUUsageInit: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    193              OS_ERR   err;
    194              OS_TICK  dly;
    195              CPU_SR_ALLOC();
   \   00000006   0x2600             MOVS     R6,#+0
    196          
    197          
    198          
    199          #ifdef OS_SAFETY_CRITICAL
    200              if (p_err == (OS_ERR *)0) {
    201                  OS_SAFETY_CRITICAL_EXCEPTION();
    202                  return;
    203              }
    204          #endif
    205          
    206          #if (OS_CFG_TMR_EN > 0u)
    207              OSTaskSuspend(&OSTmrTaskTCB, &err);
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable3_11
   \   0000000E   0x.... 0x....      BL       OSTaskSuspend
    208              if (err != OS_ERR_NONE) {
   \   00000012   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD003             BEQ.N    ??OSStatTaskCPUUsageInit_0
    209                 *p_err = err;
   \   0000001A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001E   0x8020             STRH     R0,[R4, #+0]
    210                  return;
   \   00000020   0xE062             B.N      ??OSStatTaskCPUUsageInit_1
    211              }
    212          #endif
    213          
    214              OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
    215                        (OS_OPT  )OS_OPT_TIME_DLY,
    216                        (OS_ERR *)&err);
   \                     ??OSStatTaskCPUUsageInit_0: (+1)
   \   00000022   0x466A             MOV      R2,SP
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       OSTimeDly
    217              if (err != OS_ERR_NONE) {
   \   0000002C   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD003             BEQ.N    ??OSStatTaskCPUUsageInit_2
    218                 *p_err = err;
   \   00000034   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000038   0x8020             STRH     R0,[R4, #+0]
    219                  return;
   \   0000003A   0xE055             B.N      ??OSStatTaskCPUUsageInit_1
    220              }
    221              CPU_CRITICAL_ENTER();
   \                     ??OSStatTaskCPUUsageInit_2: (+1)
   \   0000003C   0x.... 0x....      BL       CPU_SR_Save
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0x.... 0x....      BL       CPU_IntDisMeasStart
    222              OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    223              CPU_CRITICAL_EXIT();
   \   0000004E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000052   0x0030             MOVS     R0,R6
   \   00000054   0x.... 0x....      BL       CPU_SR_Restore
    224          
    225              dly = (OS_TICK)0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x0005             MOVS     R5,R0
    226              if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable3_13
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xD208             BCS.N    ??OSStatTaskCPUUsageInit_3
    227                  dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \   00000076   0x6809             LDR      R1,[R1, #+0]
   \   00000078   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000007C   0x0005             MOVS     R5,R0
    228              }
    229              if (dly == (OS_TICK)0) {
   \                     ??OSStatTaskCPUUsageInit_3: (+1)
   \   0000007E   0x2D00             CMP      R5,#+0
   \   00000080   0xD106             BNE.N    ??OSStatTaskCPUUsageInit_4
    230                  dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x210A             MOVS     R1,#+10
   \   0000008A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000008E   0x0005             MOVS     R5,R0
    231              }
    232          
    233              OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
    234                        OS_OPT_TIME_DLY,
    235                        &err);
   \                     ??OSStatTaskCPUUsageInit_4: (+1)
   \   00000090   0x466A             MOV      R2,SP
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x0028             MOVS     R0,R5
   \   00000096   0x.... 0x....      BL       OSTimeDly
    236          
    237          #if (OS_CFG_TMR_EN > 0u)
    238              OSTaskResume(&OSTmrTaskTCB, &err);
   \   0000009A   0x4669             MOV      R1,SP
   \   0000009C   0x.... 0x....      LDR.W    R0,??DataTable3_11
   \   000000A0   0x.... 0x....      BL       OSTaskResume
    239              if (err != OS_ERR_NONE) {
   \   000000A4   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD003             BEQ.N    ??OSStatTaskCPUUsageInit_5
    240                 *p_err = err;
   \   000000AC   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   000000B0   0x8020             STRH     R0,[R4, #+0]
    241                  return;
   \   000000B2   0xE019             B.N      ??OSStatTaskCPUUsageInit_1
    242              }
    243          #endif
    244          
    245              CPU_CRITICAL_ENTER();
   \                     ??OSStatTaskCPUUsageInit_5: (+1)
   \   000000B4   0x.... 0x....      BL       CPU_SR_Save
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0x.... 0x....      BL       CPU_IntDisMeasStart
    246              OSStatTaskTimeMax = (CPU_TS)0;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable3_3
   \   000000C4   0x6008             STR      R0,[R1, #+0]
    247          
    248              OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable3_12
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   000000D0   0x6008             STR      R0,[R1, #+0]
    249              OSStatTaskRdy     = OS_STATE_RDY;
   \   000000D2   0x2001             MOVS     R0,#+1
   \   000000D4   0x.... 0x....      LDR.W    R1,??DataTable3_16
   \   000000D8   0x7008             STRB     R0,[R1, #+0]
    250              CPU_CRITICAL_EXIT();
   \   000000DA   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000000DE   0x0030             MOVS     R0,R6
   \   000000E0   0x.... 0x....      BL       CPU_SR_Restore
    251             *p_err             = OS_ERR_NONE;
   \   000000E4   0x2000             MOVS     R0,#+0
   \   000000E6   0x8020             STRH     R0,[R4, #+0]
    252          }
   \                     ??OSStatTaskCPUUsageInit_1: (+1)
   \   000000E8   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    253          
    254          /*$PAGE*/
    255          /*
    256          ************************************************************************************************************************
    257          *                                                    STATISTICS TASK
    258          *
    259          * Description: This task is internal to uC/OS-III and is used to compute some statistics about the multitasking
    260          *              environment.  Specifically, OS_StatTask() computes the CPU usage.  CPU usage is determined by:
    261          *
    262          *                                                   OSStatTaskCtr
    263          *                 OSStatTaskCPUUsage = 100 * (1 - ------------------)     (units are in %)
    264          *                                                  OSStatTaskCtrMax
    265          *
    266          * Arguments  : p_arg     this pointer is not used at this time.
    267          *
    268          * Returns    : none
    269          *
    270          * Note(s)    : 1) This task runs at a priority level higher than the idle task.
    271          *
    272          *              2) You can disable this task by setting the configuration #define OS_CFG_STAT_TASK_EN to 0.
    273          *
    274          *              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establish the maximum value
    275          *                 for the idle counter.
    276          *
    277          *              4) This function is INTERNAL to uC/OS-III and your application should not call it.
    278          ************************************************************************************************************************
    279          */
    280          

   \                                 In section .text, align 2, keep-with-next
    281          void  OS_StatTask (void  *p_arg)
    282          {
   \                     OS_StatTask: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4683             MOV      R11,R0
    283          #if OS_CFG_DBG_EN > 0u
    284          #if OS_CFG_TASK_PROFILE_EN > 0u
    285              OS_CPU_USAGE usage;
    286              OS_CYCLES    cycles_total;
    287              OS_CYCLES    cycles_div;
    288              OS_CYCLES    cycles_mult;
    289              OS_CYCLES    cycles_max;
    290          #endif
    291              OS_TCB      *p_tcb;
    292          #endif
    293              OS_TICK      ctr_max;
    294              OS_TICK      ctr_mult;
    295              OS_TICK      ctr_div;
    296              OS_ERR       err;
    297              OS_TICK      dly;
    298              CPU_TS       ts_start;
    299              CPU_TS       ts_end;
    300              CPU_SR_ALLOC();
   \   00000008   0xF05F 0x0A00      MOVS     R10,#+0
    301          
    302          
    303          
    304              p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */
    305              while (OSStatTaskRdy != DEF_TRUE) {
   \                     ??OS_StatTask_0: (+1)
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable3_16
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD008             BEQ.N    ??OS_StatTask_1
    306                  OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
    307                            OS_OPT_TIME_DLY,
    308                            &err);
   \   00000016   0xAA02             ADD      R2,SP,#+8
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable3_13
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x0040             LSLS     R0,R0,#+1
   \   00000022   0x.... 0x....      BL       OSTimeDly
   \   00000026   0xE7F1             B.N      ??OS_StatTask_0
    309              }
    310              OSStatReset(&err);                                      /* Reset statistics                                       */
   \                     ??OS_StatTask_1: (+1)
   \   00000028   0xA802             ADD      R0,SP,#+8
   \   0000002A   0x.... 0x....      BL       OSStatReset
    311          
    312              dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9001             STR      R0,[SP, #+4]
    313              if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable3_13
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable3_14
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD208             BCS.N    ??OS_StatTask_2
    314                  dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable3_13
   \   0000004C   0x6809             LDR      R1,[R1, #+0]
   \   0000004E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000052   0x9001             STR      R0,[SP, #+4]
    315              }
    316              if (dly == (OS_TICK)0) {
   \                     ??OS_StatTask_2: (+1)
   \   00000054   0x9801             LDR      R0,[SP, #+4]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD106             BNE.N    ??OS_StatTask_3
    317                  dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x210A             MOVS     R1,#+10
   \   00000062   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000066   0x9001             STR      R0,[SP, #+4]
    318              }
    319          
    320              while (DEF_ON) {
    321                  ts_start        = OS_TS_GET();
   \                     ??OS_StatTask_3: (+1)
   \   00000068   0x.... 0x....      BL       CPU_TS_TmrRd
   \   0000006C   0x9005             STR      R0,[SP, #+20]
    322          #ifdef  CPU_CFG_INT_DIS_MEAS_EN
    323                  OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
   \   0000006E   0x.... 0x....      BL       CPU_IntDisMeasMaxGet
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable3_6
   \   00000076   0x6008             STR      R0,[R1, #+0]
    324          #endif
    325          
    326                  CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
   \   00000078   0x.... 0x....      BL       CPU_SR_Save
   \   0000007C   0x4682             MOV      R10,R0
   \   0000007E   0x.... 0x....      BL       CPU_IntDisMeasStart
    327                  OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable3_12
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable3_17
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    328                  OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable3_12
   \   00000094   0x6008             STR      R0,[R1, #+0]
    329                  CPU_CRITICAL_EXIT();
   \   00000096   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000009A   0x4650             MOV      R0,R10
   \   0000009C   0x.... 0x....      BL       CPU_SR_Restore
    330          
    331                  if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable3_17
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable3_15
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD24E             BCS.N    ??OS_StatTask_4
    332                      if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable3_15
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable3_18  ;; 0x61a80
   \   000000BA   0x4288             CMP      R0,R1
   \   000000BC   0xD205             BCS.N    ??OS_StatTask_5
    333                          ctr_mult = 10000u;
   \   000000BE   0xF242 0x7010      MOVW     R0,#+10000
   \   000000C2   0x4680             MOV      R8,R0
    334                          ctr_div  =     1u;
   \   000000C4   0x2001             MOVS     R0,#+1
   \   000000C6   0x4681             MOV      R9,R0
   \   000000C8   0xE025             B.N      ??OS_StatTask_6
    335                      } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
   \                     ??OS_StatTask_5: (+1)
   \   000000CA   0x....             LDR.N    R0,??DataTable3_15
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable3_19  ;; 0x3d0900
   \   000000D2   0x4288             CMP      R0,R1
   \   000000D4   0xD205             BCS.N    ??OS_StatTask_7
    336                          ctr_mult =  1000u;
   \   000000D6   0xF44F 0x707A      MOV      R0,#+1000
   \   000000DA   0x4680             MOV      R8,R0
    337                          ctr_div  =    10u;
   \   000000DC   0x200A             MOVS     R0,#+10
   \   000000DE   0x4681             MOV      R9,R0
   \   000000E0   0xE019             B.N      ??OS_StatTask_6
    338                      } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
   \                     ??OS_StatTask_7: (+1)
   \   000000E2   0x....             LDR.N    R0,??DataTable3_15
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x....             LDR.N    R1,??DataTable3_20  ;; 0x2625a00
   \   000000E8   0x4288             CMP      R0,R1
   \   000000EA   0xD204             BCS.N    ??OS_StatTask_8
    339                          ctr_mult =   100u;
   \   000000EC   0x2064             MOVS     R0,#+100
   \   000000EE   0x4680             MOV      R8,R0
    340                          ctr_div  =   100u;
   \   000000F0   0x2064             MOVS     R0,#+100
   \   000000F2   0x4681             MOV      R9,R0
   \   000000F4   0xE00F             B.N      ??OS_StatTask_6
    341                      } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
   \                     ??OS_StatTask_8: (+1)
   \   000000F6   0x....             LDR.N    R0,??DataTable3_15
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x....             LDR.N    R1,??DataTable3_21  ;; 0x17d78400
   \   000000FC   0x4288             CMP      R0,R1
   \   000000FE   0xD205             BCS.N    ??OS_StatTask_9
    342                          ctr_mult =    10u;
   \   00000100   0x200A             MOVS     R0,#+10
   \   00000102   0x4680             MOV      R8,R0
    343                          ctr_div  =  1000u;
   \   00000104   0xF44F 0x707A      MOV      R0,#+1000
   \   00000108   0x4681             MOV      R9,R0
   \   0000010A   0xE004             B.N      ??OS_StatTask_6
    344                      } else {                                                                 /*  400,000,000 and up           */
    345                          ctr_mult =     1u;
   \                     ??OS_StatTask_9: (+1)
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x4680             MOV      R8,R0
    346                          ctr_div  = 10000u;
   \   00000110   0xF242 0x7010      MOVW     R0,#+10000
   \   00000114   0x4681             MOV      R9,R0
    347                      }
    348                      ctr_max            = OSStatTaskCtrMax / ctr_div;
   \                     ??OS_StatTask_6: (+1)
   \   00000116   0x....             LDR.N    R0,??DataTable3_15
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0xFBB0 0xF0F9      UDIV     R0,R0,R9
   \   0000011E   0x9006             STR      R0,[SP, #+24]
    349                      OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
   \   00000120   0xF242 0x7010      MOVW     R0,#+10000
   \   00000124   0x....             LDR.N    R1,??DataTable3_17
   \   00000126   0x6809             LDR      R1,[R1, #+0]
   \   00000128   0xFB01 0xF108      MUL      R1,R1,R8
   \   0000012C   0x9A06             LDR      R2,[SP, #+24]
   \   0000012E   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000132   0x1A40             SUBS     R0,R0,R1
   \   00000134   0x....             LDR.N    R1,??DataTable3_22
   \   00000136   0x8008             STRH     R0,[R1, #+0]
    350                      if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
   \   00000138   0x....             LDR.N    R0,??DataTable3_2
   \   0000013A   0x8800             LDRH     R0,[R0, #+0]
   \   0000013C   0x....             LDR.N    R1,??DataTable3_22
   \   0000013E   0x8809             LDRH     R1,[R1, #+0]
   \   00000140   0x4288             CMP      R0,R1
   \   00000142   0xD208             BCS.N    ??OS_StatTask_10
    351                          OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
   \   00000144   0x....             LDR.N    R0,??DataTable3_22
   \   00000146   0x8800             LDRH     R0,[R0, #+0]
   \   00000148   0x....             LDR.N    R1,??DataTable3_2
   \   0000014A   0x8008             STRH     R0,[R1, #+0]
   \   0000014C   0xE003             B.N      ??OS_StatTask_10
    352                      }
    353                  } else {
    354                      OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
   \                     ??OS_StatTask_4: (+1)
   \   0000014E   0xF242 0x7010      MOVW     R0,#+10000
   \   00000152   0x....             LDR.N    R1,??DataTable3_22
   \   00000154   0x8008             STRH     R0,[R1, #+0]
    355                  }
    356          
    357                  OSStatTaskHook();                                   /* Invoke user definable hook                             */
   \                     ??OS_StatTask_10: (+1)
   \   00000156   0x.... 0x....      BL       OSStatTaskHook
    358          
    359          
    360          #if OS_CFG_DBG_EN > 0u
    361          #if OS_CFG_TASK_PROFILE_EN > 0u
    362                  cycles_total = (OS_CYCLES)0;
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x0005             MOVS     R5,R0
    363          
    364                  CPU_CRITICAL_ENTER();
   \   0000015E   0x.... 0x....      BL       CPU_SR_Save
   \   00000162   0x4682             MOV      R10,R0
   \   00000164   0x.... 0x....      BL       CPU_IntDisMeasStart
    365                  p_tcb = OSTaskDbgListPtr;
   \   00000168   0x....             LDR.N    R0,??DataTable3_9
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0x0007             MOVS     R7,R0
    366                  CPU_CRITICAL_EXIT();
   \   0000016E   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   00000172   0x4650             MOV      R0,R10
   \   00000174   0x.... 0x....      BL       CPU_SR_Restore
    367                  while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
   \                     ??OS_StatTask_11: (+1)
   \   00000178   0x2F00             CMP      R7,#+0
   \   0000017A   0xD052             BEQ.N    ??OS_StatTask_12
    368                      OS_CRITICAL_ENTER();
   \   0000017C   0x.... 0x....      BL       CPU_SR_Save
   \   00000180   0x4682             MOV      R10,R0
   \   00000182   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   00000186   0x....             LDR.N    R0,??DataTable3_23
   \   00000188   0x7800             LDRB     R0,[R0, #+0]
   \   0000018A   0x1C40             ADDS     R0,R0,#+1
   \   0000018C   0x....             LDR.N    R1,??DataTable3_23
   \   0000018E   0x7008             STRB     R0,[R1, #+0]
   \   00000190   0x....             LDR.N    R0,??DataTable3_23
   \   00000192   0x7800             LDRB     R0,[R0, #+0]
   \   00000194   0x2801             CMP      R0,#+1
   \   00000196   0xD101             BNE.N    ??OS_StatTask_13
   \   00000198   0x.... 0x....      BL       OS_SchedLockTimeMeasStart
   \                     ??OS_StatTask_13: (+1)
   \   0000019C   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001A0   0x4650             MOV      R0,R10
   \   000001A2   0x.... 0x....      BL       CPU_SR_Restore
    369                      p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
   \   000001A6   0xF8D7 0x009C      LDR      R0,[R7, #+156]
   \   000001AA   0xF8C7 0x00A0      STR      R0,[R7, #+160]
    370                      p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0xF8C7 0x009C      STR      R0,[R7, #+156]
    371                      OS_CRITICAL_EXIT();
   \   000001B4   0x.... 0x....      BL       CPU_SR_Save
   \   000001B8   0x4682             MOV      R10,R0
   \   000001BA   0x.... 0x....      BL       CPU_IntDisMeasStart
   \   000001BE   0x....             LDR.N    R0,??DataTable3_23
   \   000001C0   0x7800             LDRB     R0,[R0, #+0]
   \   000001C2   0x1E40             SUBS     R0,R0,#+1
   \   000001C4   0x....             LDR.N    R1,??DataTable3_23
   \   000001C6   0x7008             STRB     R0,[R1, #+0]
   \   000001C8   0x....             LDR.N    R0,??DataTable3_23
   \   000001CA   0x7800             LDRB     R0,[R0, #+0]
   \   000001CC   0x2800             CMP      R0,#+0
   \   000001CE   0xD113             BNE.N    ??OS_StatTask_14
   \   000001D0   0x.... 0x....      BL       OS_SchedLockTimeMeasStop
   \   000001D4   0x....             LDR.N    R0,??DataTable3_24
   \   000001D6   0x8800             LDRH     R0,[R0, #+0]
   \   000001D8   0x2800             CMP      R0,#+0
   \   000001DA   0xD007             BEQ.N    ??OS_StatTask_15
   \   000001DC   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001E0   0x4650             MOV      R0,R10
   \   000001E2   0x.... 0x....      BL       CPU_SR_Restore
   \   000001E6   0x.... 0x....      BL       OS_Sched0
   \   000001EA   0xE00A             B.N      ??OS_StatTask_16
   \                     ??OS_StatTask_15: (+1)
   \   000001EC   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001F0   0x4650             MOV      R0,R10
   \   000001F2   0x.... 0x....      BL       CPU_SR_Restore
   \   000001F6   0xE004             B.N      ??OS_StatTask_16
   \                     ??OS_StatTask_14: (+1)
   \   000001F8   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000001FC   0x4650             MOV      R0,R10
   \   000001FE   0x.... 0x....      BL       CPU_SR_Restore
    372          
    373                      cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
   \                     ??OS_StatTask_16: (+1)
   \   00000202   0xF8D7 0x00A0      LDR      R0,[R7, #+160]
   \   00000206   0x1945             ADDS     R5,R0,R5
    374          
    375                      CPU_CRITICAL_ENTER();
   \   00000208   0x.... 0x....      BL       CPU_SR_Save
   \   0000020C   0x4682             MOV      R10,R0
   \   0000020E   0x.... 0x....      BL       CPU_IntDisMeasStart
    376                      p_tcb                  = p_tcb->DbgNextPtr;
   \   00000212   0xF8D7 0x70C0      LDR      R7,[R7, #+192]
    377                      CPU_CRITICAL_EXIT();
   \   00000216   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000021A   0x4650             MOV      R0,R10
   \   0000021C   0x.... 0x....      BL       CPU_SR_Restore
   \   00000220   0xE7AA             B.N      ??OS_StatTask_11
    378                  }
    379          #endif
    380          
    381          
    382          #if OS_CFG_TASK_PROFILE_EN > 0u
    383                                                                      /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
    384                  if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
   \                     ??OS_StatTask_12: (+1)
   \   00000222   0x2D00             CMP      R5,#+0
   \   00000224   0xD02C             BEQ.N    ??OS_StatTask_17
    385                      if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
   \   00000226   0x....             LDR.N    R0,??DataTable3_18  ;; 0x61a80
   \   00000228   0x4285             CMP      R5,R0
   \   0000022A   0xD205             BCS.N    ??OS_StatTask_18
    386                          cycles_mult = 10000u;
   \   0000022C   0xF242 0x7010      MOVW     R0,#+10000
   \   00000230   0x0006             MOVS     R6,R0
    387                          cycles_div  =     1u;
   \   00000232   0x2001             MOVS     R0,#+1
   \   00000234   0x9000             STR      R0,[SP, #+0]
   \   00000236   0xE01E             B.N      ??OS_StatTask_19
    388                      } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
   \                     ??OS_StatTask_18: (+1)
   \   00000238   0x....             LDR.N    R0,??DataTable3_19  ;; 0x3d0900
   \   0000023A   0x4285             CMP      R5,R0
   \   0000023C   0xD205             BCS.N    ??OS_StatTask_20
    389                          cycles_mult =  1000u;
   \   0000023E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000242   0x0006             MOVS     R6,R0
    390                          cycles_div  =    10u;
   \   00000244   0x200A             MOVS     R0,#+10
   \   00000246   0x9000             STR      R0,[SP, #+0]
   \   00000248   0xE015             B.N      ??OS_StatTask_19
    391                      } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
   \                     ??OS_StatTask_20: (+1)
   \   0000024A   0x....             LDR.N    R0,??DataTable3_20  ;; 0x2625a00
   \   0000024C   0x4285             CMP      R5,R0
   \   0000024E   0xD204             BCS.N    ??OS_StatTask_21
    392                          cycles_mult =   100u;
   \   00000250   0x2064             MOVS     R0,#+100
   \   00000252   0x0006             MOVS     R6,R0
    393                          cycles_div  =   100u;
   \   00000254   0x2064             MOVS     R0,#+100
   \   00000256   0x9000             STR      R0,[SP, #+0]
   \   00000258   0xE00D             B.N      ??OS_StatTask_19
    394                      } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
   \                     ??OS_StatTask_21: (+1)
   \   0000025A   0x....             LDR.N    R0,??DataTable3_21  ;; 0x17d78400
   \   0000025C   0x4285             CMP      R5,R0
   \   0000025E   0xD205             BCS.N    ??OS_StatTask_22
    395                          cycles_mult =    10u;
   \   00000260   0x200A             MOVS     R0,#+10
   \   00000262   0x0006             MOVS     R6,R0
    396                          cycles_div  =  1000u;
   \   00000264   0xF44F 0x707A      MOV      R0,#+1000
   \   00000268   0x9000             STR      R0,[SP, #+0]
   \   0000026A   0xE004             B.N      ??OS_StatTask_19
    397                      } else {                                                                 /*  400,000,000 and up           */
    398                          cycles_mult =     1u;
   \                     ??OS_StatTask_22: (+1)
   \   0000026C   0x2001             MOVS     R0,#+1
   \   0000026E   0x0006             MOVS     R6,R0
    399                          cycles_div  = 10000u;
   \   00000270   0xF242 0x7010      MOVW     R0,#+10000
   \   00000274   0x9000             STR      R0,[SP, #+0]
    400                      }
    401                      cycles_max  = cycles_total / cycles_div;
   \                     ??OS_StatTask_19: (+1)
   \   00000276   0x9800             LDR      R0,[SP, #+0]
   \   00000278   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   0000027C   0x9004             STR      R0,[SP, #+16]
   \   0000027E   0xE003             B.N      ??OS_StatTask_23
    402                  } else {
    403                      cycles_mult = 0u;
   \                     ??OS_StatTask_17: (+1)
   \   00000280   0x2000             MOVS     R0,#+0
   \   00000282   0x0006             MOVS     R6,R0
    404                      cycles_max  = 1u;
   \   00000284   0x2001             MOVS     R0,#+1
   \   00000286   0x9004             STR      R0,[SP, #+16]
    405                  }
    406          #endif
    407                  CPU_CRITICAL_ENTER();
   \                     ??OS_StatTask_23: (+1)
   \   00000288   0x.... 0x....      BL       CPU_SR_Save
   \   0000028C   0x4682             MOV      R10,R0
   \   0000028E   0x.... 0x....      BL       CPU_IntDisMeasStart
    408                  p_tcb = OSTaskDbgListPtr;
   \   00000292   0x....             LDR.N    R0,??DataTable3_9
   \   00000294   0x6800             LDR      R0,[R0, #+0]
   \   00000296   0x0007             MOVS     R7,R0
    409                  CPU_CRITICAL_EXIT();
   \   00000298   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   0000029C   0x4650             MOV      R0,R10
   \   0000029E   0x.... 0x....      BL       CPU_SR_Restore
    410                  while (p_tcb != (OS_TCB *)0) {
   \                     ??OS_StatTask_24: (+1)
   \   000002A2   0x2F00             CMP      R7,#+0
   \   000002A4   0xD02D             BEQ.N    ??OS_StatTask_25
    411          #if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
    412                      usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
   \   000002A6   0xF8D7 0x00A0      LDR      R0,[R7, #+160]
   \   000002AA   0xFB00 0xF006      MUL      R0,R0,R6
   \   000002AE   0x9904             LDR      R1,[SP, #+16]
   \   000002B0   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000002B4   0x0004             MOVS     R4,R0
    413                      if (usage > 10000u) {
   \   000002B6   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000002B8   0xF242 0x7011      MOVW     R0,#+10001
   \   000002BC   0x4284             CMP      R4,R0
   \   000002BE   0xD302             BCC.N    ??OS_StatTask_26
    414                          usage = 10000u;
   \   000002C0   0xF242 0x7010      MOVW     R0,#+10000
   \   000002C4   0x0004             MOVS     R4,R0
    415                      }
    416                      p_tcb->CPUUsage = usage;
   \                     ??OS_StatTask_26: (+1)
   \   000002C6   0xF8A7 0x408C      STRH     R4,[R7, #+140]
    417                      if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
   \   000002CA   0xF8B7 0x008E      LDRH     R0,[R7, #+142]
   \   000002CE   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000002D0   0x42A0             CMP      R0,R4
   \   000002D2   0xD201             BCS.N    ??OS_StatTask_27
    418                          p_tcb->CPUUsageMax = usage;
   \   000002D4   0xF8A7 0x408E      STRH     R4,[R7, #+142]
    419                      }
    420          #endif
    421          
    422          #if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    423                      OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
    424                                   &p_tcb->StkFree,
    425                                   &p_tcb->StkUsed,
    426                                   &err);
   \                     ??OS_StatTask_27: (+1)
   \   000002D8   0xAB02             ADD      R3,SP,#+8
   \   000002DA   0xF117 0x02AC      ADDS     R2,R7,#+172
   \   000002DE   0xF117 0x01B0      ADDS     R1,R7,#+176
   \   000002E2   0x0038             MOVS     R0,R7
   \   000002E4   0x.... 0x....      BL       OSTaskStkChk
    427          #endif
    428          
    429                      CPU_CRITICAL_ENTER();
   \   000002E8   0x.... 0x....      BL       CPU_SR_Save
   \   000002EC   0x4682             MOV      R10,R0
   \   000002EE   0x.... 0x....      BL       CPU_IntDisMeasStart
    430                      p_tcb = p_tcb->DbgNextPtr;
   \   000002F2   0xF8D7 0x70C0      LDR      R7,[R7, #+192]
    431                      CPU_CRITICAL_EXIT();
   \   000002F6   0x.... 0x....      BL       CPU_IntDisMeasStop
   \   000002FA   0x4650             MOV      R0,R10
   \   000002FC   0x.... 0x....      BL       CPU_SR_Restore
   \   00000300   0xE7CF             B.N      ??OS_StatTask_24
    432                  }
    433          #endif
    434          
    435                  if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
   \                     ??OS_StatTask_25: (+1)
   \   00000302   0x....             LDR.N    R0,??DataTable3_25
   \   00000304   0x7800             LDRB     R0,[R0, #+0]
   \   00000306   0x2801             CMP      R0,#+1
   \   00000308   0xD105             BNE.N    ??OS_StatTask_28
    436                      OSStatResetFlag  = DEF_FALSE;
   \   0000030A   0x2000             MOVS     R0,#+0
   \   0000030C   0x....             LDR.N    R1,??DataTable3_25
   \   0000030E   0x7008             STRB     R0,[R1, #+0]
    437                      OSStatReset(&err);
   \   00000310   0xA802             ADD      R0,SP,#+8
   \   00000312   0x.... 0x....      BL       OSStatReset
    438                  }
    439          
    440                  ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
   \                     ??OS_StatTask_28: (+1)
   \   00000316   0x.... 0x....      BL       CPU_TS_TmrRd
   \   0000031A   0x9905             LDR      R1,[SP, #+20]
   \   0000031C   0x1A40             SUBS     R0,R0,R1
   \   0000031E   0x9003             STR      R0,[SP, #+12]
    441                  if (OSStatTaskTimeMax < ts_end) {
   \   00000320   0x....             LDR.N    R0,??DataTable3_3
   \   00000322   0x6800             LDR      R0,[R0, #+0]
   \   00000324   0x9903             LDR      R1,[SP, #+12]
   \   00000326   0x4288             CMP      R0,R1
   \   00000328   0xD202             BCS.N    ??OS_StatTask_29
    442                      OSStatTaskTimeMax = ts_end;
   \   0000032A   0x9803             LDR      R0,[SP, #+12]
   \   0000032C   0x....             LDR.N    R1,??DataTable3_3
   \   0000032E   0x6008             STR      R0,[R1, #+0]
    443                  }
    444          
    445                  OSTimeDly(dly,
    446                            OS_OPT_TIME_DLY,
    447                            &err);
   \                     ??OS_StatTask_29: (+1)
   \   00000330   0xAA02             ADD      R2,SP,#+8
   \   00000332   0x2100             MOVS     R1,#+0
   \   00000334   0x9801             LDR      R0,[SP, #+4]
   \   00000336   0x.... 0x....      BL       OSTimeDly
   \   0000033A   0xE695             B.N      ??OS_StatTask_3
    448              }
    449          }
    450          
    451          /*$PAGE*/
    452          /*
    453          ************************************************************************************************************************
    454          *                                              INITIALIZE THE STATISTICS
    455          *
    456          * Description: This function is called by OSInit() to initialize the statistic task.
    457          *
    458          * Argument(s): p_err     is a pointer to a variable that will contain an error code returned by this function.
    459          *
    460          *                            OS_ERR_STK_INVALID       If you specified a NULL stack pointer during configuration
    461          *                            OS_ERR_STK_SIZE_INVALID  If you didn't specify a large enough stack.
    462          *                            OS_ERR_PRIO_INVALID      If you specified a priority for the statistic task equal to or
    463          *                                                     lower (i.e. higher number) than the idle task.
    464          *                            OS_ERR_xxx               An error code returned by OSTaskCreate()
    465          *
    466          * Returns    : none
    467          *
    468          * Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
    469          ************************************************************************************************************************
    470          */
    471          

   \                                 In section .text, align 2, keep-with-next
    472          void  OS_StatTaskInit (OS_ERR  *p_err)
    473          {
   \                     OS_StatTaskInit: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
   \   00000004   0x0004             MOVS     R4,R0
    474          #ifdef OS_SAFETY_CRITICAL
    475              if (p_err == (OS_ERR *)0) {
    476                  OS_SAFETY_CRITICAL_EXCEPTION();
    477                  return;
    478              }
    479          #endif
    480          
    481              OSStatTaskCtr    = (OS_TICK)0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable3_12
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    482              OSStatTaskCtrRun = (OS_TICK)0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR.N    R1,??DataTable3_17
   \   00000010   0x6008             STR      R0,[R1, #+0]
    483              OSStatTaskCtrMax = (OS_TICK)0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable3_15
   \   00000016   0x6008             STR      R0,[R1, #+0]
    484              OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable3_16
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    485              OSStatResetFlag  = DEF_FALSE;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR.N    R1,??DataTable3_25
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    486          
    487                                                                      /* ---------------- CREATE THE STAT TASK ---------------- */
    488              if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
   \   00000024   0x....             LDR.N    R0,??DataTable3_26
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD103             BNE.N    ??OS_StatTaskInit_0
    489                 *p_err = OS_ERR_STAT_STK_INVALID;
   \   0000002C   0xF646 0x602B      MOVW     R0,#+28203
   \   00000030   0x8020             STRH     R0,[R4, #+0]
    490                  return;
   \   00000032   0xE02C             B.N      ??OS_StatTaskInit_1
    491              }
    492          
    493              if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
   \                     ??OS_StatTaskInit_0: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable3_27
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x....             LDR.N    R1,??DataTable3_28
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD203             BCS.N    ??OS_StatTaskInit_2
    494                 *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
   \   00000040   0xF646 0x602C      MOVW     R0,#+28204
   \   00000044   0x8020             STRH     R0,[R4, #+0]
    495                  return;
   \   00000046   0xE022             B.N      ??OS_StatTaskInit_1
    496              }
    497          
    498              if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
   \                     ??OS_StatTaskInit_2: (+1)
   \   00000048   0x....             LDR.N    R0,??DataTable3_29
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x281F             CMP      R0,#+31
   \   0000004E   0xD303             BCC.N    ??OS_StatTaskInit_3
    499                 *p_err = OS_ERR_STAT_PRIO_INVALID;
   \   00000050   0xF646 0x602A      MOVW     R0,#+28202
   \   00000054   0x8020             STRH     R0,[R4, #+0]
    500                  return;
   \   00000056   0xE01A             B.N      ??OS_StatTaskInit_1
    501              }
    502          
    503              OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
    504                           (CPU_CHAR   *)((void *)"uC/OS-III Stat Task"),
    505                           (OS_TASK_PTR )OS_StatTask,
    506                           (void       *)0,
    507                           (OS_PRIO     )OSCfg_StatTaskPrio,
    508                           (CPU_STK    *)OSCfg_StatTaskStkBasePtr,
    509                           (CPU_STK_SIZE)OSCfg_StatTaskStkLimit,
    510                           (CPU_STK_SIZE)OSCfg_StatTaskStkSize,
    511                           (OS_MSG_QTY  )0,
    512                           (OS_TICK     )0,
    513                           (void       *)0,
    514                           (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
    515                           (OS_ERR     *)p_err);
   \                     ??OS_StatTaskInit_3: (+1)
   \   00000058   0x9408             STR      R4,[SP, #+32]
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x9007             STR      R0,[SP, #+28]
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x9006             STR      R0,[SP, #+24]
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9005             STR      R0,[SP, #+20]
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x9004             STR      R0,[SP, #+16]
   \   0000006A   0x....             LDR.N    R0,??DataTable3_27
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x9003             STR      R0,[SP, #+12]
   \   00000070   0x....             LDR.N    R0,??DataTable3_30
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x9002             STR      R0,[SP, #+8]
   \   00000076   0x....             LDR.N    R0,??DataTable3_26
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x9001             STR      R0,[SP, #+4]
   \   0000007C   0x....             LDR.N    R0,??DataTable3_29
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x2300             MOVS     R3,#+0
   \   00000084   0x....             LDR.N    R2,??DataTable3_31
   \   00000086   0x....             LDR.N    R1,??DataTable3_32
   \   00000088   0x....             LDR.N    R0,??DataTable3_33
   \   0000008A   0x.... 0x....      BL       OSTaskCreate
    516          }
   \                     ??OS_StatTaskInit_1: (+1)
   \   0000008E   0xB00A             ADD      SP,SP,#+40
   \   00000090   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     OSIntQTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     OSIntQNbrEntriesMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     OSStatTaskCPUUsageMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     OSStatTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     OSTickTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     OSTmrTaskTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     OSIntDisTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     OSSchedLockTimeMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     OSMsgPool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     OSTaskDbgListPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     OSQDbgListPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     OSTmrTaskTCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     OSStatTaskCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     OSCfg_StatTaskRate_Hz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     OSCfg_TickRate_Hz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     OSStatTaskCtrMax

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     OSStatTaskRdy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     OSStatTaskCtrRun

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x02625A00         DC32     0x2625a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x17D78400         DC32     0x17d78400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x........         DC32     OSStatTaskCPUUsage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x........         DC32     OSSchedLockNestingCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x........         DC32     OSIntQNbrEntries

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x........         DC32     OSStatResetFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   0x........         DC32     OSCfg_StatTaskStkBasePtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \   00000000   0x........         DC32     OSCfg_StatTaskStkSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \   00000000   0x........         DC32     OSCfg_StkSizeMin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_29:
   \   00000000   0x........         DC32     OSCfg_StatTaskPrio

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_30:
   \   00000000   0x........         DC32     OSCfg_StatTaskStkLimit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_31:
   \   00000000   0x........         DC32     OS_StatTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_32:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_33:
   \   00000000   0x........         DC32     OSStatTaskTCB

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x75 0x43          DC8 "uC/OS-III Stat Task"
   \              0x2F 0x4F    
   \              0x53 0x2D    
   \              0x49 0x49    
   \              0x49 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x20 0x54    
   \              0x61 0x73    
   \              0x6B 0x00    
    517          
    518          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   OSStatReset
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> CPU_TS_TmrRd
        24   -> OS_TickListResetPeak
        24   -> OS_TmrResetPeak
      24   OSStatTaskCPUUsageInit
        24   -> CPU_IntDisMeasStart
        24   -> CPU_IntDisMeasStop
        24   -> CPU_SR_Restore
        24   -> CPU_SR_Save
        24   -> OSTaskResume
        24   -> OSTaskSuspend
        24   -> OSTimeDly
      64   OS_StatTask
        64   -> CPU_IntDisMeasMaxGet
        64   -> CPU_IntDisMeasStart
        64   -> CPU_IntDisMeasStop
        64   -> CPU_SR_Restore
        64   -> CPU_SR_Save
        64   -> CPU_TS_TmrRd
        64   -> OSStatReset
        64   -> OSStatTaskHook
        64   -> OSTaskStkChk
        64   -> OSTimeDly
        64   -> OS_Sched0
        64   -> OS_SchedLockTimeMeasStart
        64   -> OS_SchedLockTimeMeasStop
      48   OS_StatTaskInit
        48   -> OSTaskCreate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      20  ?_0
     312  OSStatReset
     234  OSStatTaskCPUUsageInit
     828  OS_StatTask
     146  OS_StatTaskInit

 
    20 bytes in section .rodata
 1 656 bytes in section .text
 
 1 656 bytes of CODE  memory
    20 bytes of CONST memory

Errors: none
Warnings: none
